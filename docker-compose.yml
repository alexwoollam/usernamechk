services:
  gateway:
    build:
      context: ./gateway
    ports:
      - "8080:3000"
    depends_on:
      - redis
      - outbox-inbox
    environment:
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      OUTBOX_HOST: outbox-inbox
      OUTBOX_USER: user
      OUTBOX_PASS: pass
      OUTBOX_NAME: usernames
    networks:
      - backend

  relay:
    build:
      context: ./message-relay
    depends_on:
      - gateway
      - outbox-inbox
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq
      OUTBOX_HOST: outbox-inbox
      OUTBOX_USER: user
      OUTBOX_PASS: pass
      OUTBOX_NAME: usernames
    networks:
      - backend    

  outbox-inbox:
    image: postgres:16
    ports:
      - "5488:5432"
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: usernames
    volumes:
      - oipgdata:/var/lib/postgresql/data
    networks:
      - backend

  username-checker:
    build:
      context: ./username-checker
    depends_on:
      - rabbitmq
      - username-registry
      - redis
    environment:
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      DB_HOST: username-registry
    networks:
      - backend

  username-suggester:
    build:
      context: ./username-suggester
    ports:
      - "8088:80"
    depends_on:
      - redis
    environment:
      REDIS_HOST: redis
    networks:
      - backend    

  username-registry:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: usernames
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis/redis-stack:latest
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend

  avatar-maker:
    build:
      context: ./avatar-maker
    depends_on:
      - image-storage
    environment:
      RABBITMQ_HOST: rabbitmq
      MINIO_ACCESS_KEY: R6dRcQ6skM7WVLJ5vSpr
      MINIO_PORT: 9000
      MINIO_SECRET_KEY: eyleCAZPJNNfK63Xhvaa25zCYyK9EznClNNA1hpt
      MINIO_ENDPOINT: image-storage
      MINIO_BUCKET: avatar
    networks:
      - backend    

  image-storage:
    image: minio/minio
    command: server -C /etc/minio --address ":9000" --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - storage:/data
    networks:
      - backend

volumes:
  pgdata:
  oipgdata:
  storage:

networks:
  backend:
    driver: bridge
